#!/usr/bin/perl

=head1 NAME

  tom

=head1 DESCRIPTION

do stuff with Tomboy files

=head1 USAGE

  tom <op-code> @options @parameters

=head1 OPTIONS

  --note-path <dir>
  -d <dir> ... full path of Tomboy notes directory
  -e ... edit note (used with find)

=head1 OP-CODES

=head2 toc

Refresh table of contents file.

=head2 find <pattern>

Find notes matching given pattern.  If option -e is given, open these notes.

=head2 show

=head2 diff

=head2 csv

=head2 mergecheck

=cut

use strict;

use Data::Dumper;
$Data::Dumper::Indent= 1;

use Util::Simple_CSV;

use Tomboy::Note::Simple;
use Tomboy::Directory;
use Tomboy::TOC;

my $toc_file;

my $note_dir_changed= 0;
my $note_dir;
if ($ENV{'OSTYPE'} eq 'cygwin')
{
  my $p= `cygpath -O`;
  chop ($p);
  my @p= split('/', $p);
  pop (@p);
  $note_dir= join ('/', @p, qw(AppData Roaming Tomboy notes));
}
else
{
  $note_dir= $ENV{'HOME'} . '/.local/share/tomboy';
}

my $start_tb= 0;
my $start_visual_editor= 0; # AKA $EDITOR
my $dump_note= 0;
my $toc;
my $op_code;
my @PAR;

binmode (STDOUT, ':utf8');

while (my $arg= shift (@ARGV))
{
  if ($arg eq '--')
  {
    push (@PAR, @ARGV);
    @ARGV= ();
  }
  elsif ($arg =~ /^--(.+)/)
  {
    my ($op, $val)= split ('=', $1, 2);
    print "op=[$op] val=[$val]\n";

    if ($op eq 'note-path') { $note_dir= $val || shift(@ARGV); $note_dir_changed= 1; }
    else
    {
      usage();
    }
  }
  elsif ($arg =~ /^-(.+)/)
  {
    my @a= split ('', $1);
    foreach my $a (@a)
    {
         if ($a eq 'd') { $note_dir= shift (@ARGV); $note_dir_changed= 1; }
      elsif ($a eq 't') { $toc_file= shift (@ARGV); }
      elsif ($a eq 'e') { $start_tb= 1; }
      elsif ($a eq 'v') { $start_visual_editor= 1; }
      elsif ($a eq 'D') { $dump_note= 1; }
      else
      {
        usage();
      }
    }
  }
  else
  {
    push (@PAR, $arg);
  }
}

my $op_code= shift (@PAR) unless (defined ($op_code));
print "op_code=[$op_code] par=[", join (';', @PAR), "]\n";

   if ($op_code eq 'help') { usage(); }
elsif ($op_code eq 'dump') { dump_note ($_) foreach (@PAR); }
elsif ($op_code eq 'show') { find_note ('uuid', $_) foreach (@PAR); }
elsif ($op_code eq 'toc')  { tom_toc(); }
elsif ($op_code eq 'csv')  { tom_csv(); }
elsif ($op_code eq 'find') { find_note('title', @PAR); }
elsif ($op_code eq 'uuid') { my $uuid= Tomboy::get_uuid(); print $uuid, "\n"; }
elsif ($op_code eq 'diff')
{
  my $f1= shift (@PAR);
  my $n1= parse Tomboy::Note::Simple ($f1);

  foreach my $f2 (@PAR)
  {
    my $n2= parse Tomboy::Note::Simple ($f2);
    diff_note ($n1, $n2);
  }
}
elsif ($op_code eq 'mergecheck')
{
  my $merge_label= shift (@PAR);
  my $merge_dir= shift (@PAR);
  merge_check ($merge_label, $merge_dir);
}
else
{
  usage();
}

exit (0);

sub usage
{
  system ('perldoc', $0);
  exit;
}

sub setup_toc
{
  $toc_file= join ('/', $note_dir, 'Tomboy-TOC.csv') unless (defined ($toc_file));
  $toc= new Tomboy::TOC('note_dir' => $note_dir, 'toc_file' => $toc_file);
  # print "toc: ", Dumper ($toc);
}

sub tom_toc
{
  setup_toc();
  $toc->scan_dir();
}

sub find_note
{
  my $where= shift;

  setup_toc();

  my %uuid;
  foreach my $pattern (@_)
  {
    my @res= $toc->find ($pattern, $where);
    foreach my $res (@res) { $uuid{$res->{'uuid'}}= $res; } # TODO: count hits
  }

  foreach my $uuid (keys %uuid)
  {
    if ($start_tb)
    {
      my @par= ('uuid' => $uuid);
      push (@par, '--note-path', $note_dir) if ($note_dir_changed);
      Tomboy::start_tb (@par);
    }
    elsif ($start_visual_editor)
    {
      my $fnm= join ('/', $note_dir, $uuid . '.note');
      my $editor= $ENV{'EDITOR'} || '/usr/bin/vi';
      print ">>> [", join (' ', $editor, $fnm), "]\n";
      system ($editor, $fnm);
    }
    elsif ($dump_note)
    {
      dump_note($uuid{$uuid}->{'fnm'});
    }
    else
    {
      print Dumper ($uuid{$uuid});
    }
  }
}

sub tom_csv
{
  setup_toc();

  # TODO: show CSV file itself
  system (qw(csv --TAB --UTF8), $toc_file);
}

sub dump_note
{
  my $note_fnm= shift;

  my $n1= parse Tomboy::Note::Simple ($note_fnm);
  $n1->update();
  print "n1: ", Dumper ($n1);
}

sub diff_note
{
  my $n1= shift;
  my $n2= shift;
  print "n1: ", Dumper ($n1);
  print "n2: ", Dumper ($n2);
}

sub merge_check
{
  my $merge_label= shift;
  my $merge_dir= shift;

  unless (defined ($merge_dir))
  {
    print "need merge directory\n";
    usage();
  }

  setup_toc(); # prepare main TOC
  $toc->scan_dir();

  ## TODO: add option to specify toc file too unless ($merge_dir =~ /\.csv$);
  my $m_toc_file= join ('/', $merge_dir, 'Tomboy-TOC.csv');
  my $m_toc= new Tomboy::TOC('note_dir' => $merge_dir, 'toc_file' => $m_toc_file);
  print "m_toc: ", Dumper ($m_toc);
  $m_toc->scan_dir();
  # print "m_toc: ", Dumper ($m_toc);

  my $tbm= new tb_merge();

  $tbm->toc_merge ('main', $toc);
  $tbm->toc_merge ($merge_label, $m_toc);
  $tbm->dups ('uuid');
  $tbm->dups ('title');
}

# TODO: to be factored out into separate module ...
package tb_merge;

sub new
{
  bless {}, shift;
}

sub crf
{
  my $tbm= shift;
  my $crf= shift;

  my $x= $tbm->{$crf};
  $x= $tbm->{$crf}= {} unless (defined ($x));
  $x;
}

sub toc_merge
{
  my $tbm= shift;
  my $label= shift;
  my $toc= shift;

  $tbm->{'tocs'}->{$label}= $toc;
  my $x_uuid= $tbm->crf('uuid');
  my $x_title= $tbm->crf('title');

  my $csv= $toc->{'_toc'};
  foreach my $row (@{$csv->{'data'}})
  {
    # print "row: ", main::Dumper($row);
    my ($uuid, $title)= map { $row->{$_} } qw(uuid title);
    # printf ("%s %s\n", $uuid, $title);
    my $x= [ $label, $uuid, $title, $row ];
    push (@{$x_uuid->{$uuid}}, $x);
    push (@{$x_title->{$title}}, $x);
  }
}

sub dups
{
  my $tbm= shift;
  my $crf= shift;

print "dup check by field=[$crf]\n";
  my $xx= $tbm->crf($crf);
  foreach my $idx (sort keys %$xx)
  {
    my $item= $xx->{$idx};
    next if (@$item == 1); # only one item, not a dup...
    print "item: ", main::Dumper($item);
  }
}

